:- compiler_options([xpp_on]).
#include "standard.h"

:- export add_remote_lib_dir/2.
:- export add_remote_repository/1.
:- export remote_repository/1.

:- import member/2, 
	  length/2 
     from basics.
:- import conset/2,
          coninc/2
     from gensym.
:- import getenv/2 from machine.
:- import concat_atom/2 from string.

:- dynamic dyn_remote_repository/1.

module_cache_dir(ModuleCache) :-
	(getenv('XSB_MODULE_CACHE', ModuleCache), !)
    ;
	(getenv('HOME', Home),concat_atom([Home,'/.xsbmodules'],ModuleCache),!).

maven_home(X) :-
	getenv('MAVEN_HOME',X).
maven_home(X) :-
	getenv('M2_HOME',X).
maven_home(X) :-
	getenv('HOME',P),
	concat_atom([P,'/.m2'],X).

add_remote_repository(Url) :-
	assert(dyn_remote_repository(Url)).

remote_repository(X) :-
	dyn_remote_repository(X).
remote_repository(X) :-
	getenv('XSB_REMOTE_REPOSITORY', X).
remote_repositories(Repositories) :-
	findall(X,remote_repository(X),Repositories),
	length(Repositories, L),
	(
	    L =:= 0 ->
	    writeln(STDERR, 'No remote repository set. Use add_remote_repository/1 or set the environment variable XSB_REMOTE_REPOSITORY'),
	    fail;
	    true
	).

add_remote_lib_dir(GAV, FilePath) :-
	basics:member(g=GroupId, GAV),
	basics:member(a=ArtifactId, GAV),
	basics:member(v=Version, GAV),
	repository_path(GroupId, ArtifactId, Version, RepositoryDir, ArtifactFilename),

	download_archive_file(RepositoryDir, ArtifactFilename, LocalArchiveFile),
	unzip_archive_file(LocalArchiveFile, RepositoryDir, ExtractedPath),

	consult:add_lib_dir([ExtractedPath,'/',FilePath]).

repository_path(GroupId, ArtifactId, Version, RepositoryDir, ArtifactFilename) :-
	atom_dot_to_slash(GroupId,GroupPath),
	concat_atom([GroupPath,'/',ArtifactId,'/',Version],RepositoryDir),
	concat_atom([ArtifactId,'-',Version,'.jar'],ArtifactFilename).
	
download_archive_file(RepositoryPath, ArtifactFilename, LocalDownloadPath) :-
	remote_repositories(Repositories),
	member(Repo, Repositories),
	concat_atom([Repo, '/', RepositoryPath, '/', ArtifactFilename], Url),
	maven_home(MavenHome),
	concat_atom([MavenHome, '/repository/', RepositoryPath], LocalDownloadDir),
	concat_atom([LocalDownloadDir, '/', ArtifactFilename], LocalDownloadPath),
	( file_exists(LocalDownloadPath) -> 
	    true ;
            concat_atom(['attempting to download ', ArtifactFilename, ' from ', Url, ' ... '], ErrMsg),
	    write(userout, ErrMsg),
	    (download_file(Url, TempFile) ->
                mkdirs(LocalDownloadDir),
                path_sysop(rename, TempFile, LocalDownloadPath),
		writeln('Done') ;
		writeln('Failed'),
		fail
	    )
	).

mkdirs(Dir) :-
    shell(['mkdir -p ', Dir], Result),
    ( Result = 0
    -> true
    ; fail).
    
download_file(Url, TempFile) :-
    create_temp_file(TempFile),
    shell(['curl -f -s ', Url, ' -o ', TempFile], Result),
    ( Result = 0
    -> true
    ; fail).
    

unzip_archive_file(ZipFile, RepositoryPath, ExtractedPath) :-
	module_cache_dir(CacheDir),
	concat_atom([CacheDir,'/',RepositoryPath], ExtractedPath),
        (file_exists(ExtractedPath)
        ->  true
	;   shell(['mkdir -p ', ExtractedPath]),
	    shell(['unzip -q -u ', ZipFile, ' -d ', ExtractedPath])).

atom_dot_to_slash(Input, Output) :-
	atom_codes(Input, InputCodes),
	dot_to_slash(InputCodes, OutputCodes),
	atom_codes(Output, OutputCodes).

dot_to_slash([],[]).
% GPP is confused by 0'.' and 0'/' ???
dot_to_slash([D|RestIn], [S|RestOut]) :- "."=[D],"/"=[S],!, dot_to_slash(RestIn,RestOut).
dot_to_slash([X|RestIn],[X|RestOut]) :- dot_to_slash(RestIn,RestOut).

create_temp_file(TempFile) :-
    get_temp_dir(TempDir),
    create_temp_file(TempDir, TempFile).

create_temp_file(Prefix, TempFile) :-
   repeat,
   coninc('_tmp_file_cnt', X),
   number_codes(X, Xc),
   expand_filename([Prefix, Xc, '.txt'], TempFile),
   (file_exists(TempFile)
   ->  fail
   ;   !,true).

get_temp_dir(TempDir) :-
    module_cache_dir(ModuleCacheDir),
    concat_atom([ModuleCacheDir, '/', tmp], TempDir),
    mkdirs(TempDir).
